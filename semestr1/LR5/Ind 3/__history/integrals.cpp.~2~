//---------------------------------------------------------------------------

#pragma hdrstop

#include "integrals.h"
#include <iostream>
#include <cmath>
using namespace std;

void integral1() {
	int n;
	float a = 0.8, b = 2.4, x, I = 0;
	cout << "How many parts do you want to split the integration segment: ";
	cin >> n;
	cout << endl;
	float h = (b - a) / n;
	//метод левых прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h;
		I += sqrt(0.4 * pow(x, 2) + 1.5) / (2.5 + sqrt(2 * x + 0.8));
	}
	cout << "Integral 1 by method of left rectangles on the segment from 0.8 to 2.4: " << h * I << endl;
	I = 0;

	//метод правых прямоугольников
	for (int i = 1; i <= n; i++)
	{
		x = a + i * h;
		I += sqrt(0.4 * pow(x, 2) + 1.5) / (2.5 + sqrt(2 * x + 0.8));
	}
	cout << "Integral 1 by method of right rectangles on the segment from 0.8 to 2.4: " << h * I << endl;
	I = 0;

	//метод средних прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h + h / 2;
		I += sqrt(0.4 * pow(x, 2) + 1.5) / (2.5 + sqrt(2 * x + 0.8));
	}
	cout << "Integral 1 by method of center rectangles on the segment from 0.8 to 2.4: " << h * I << endl;
	I = 0;

	//метод трапеций
	for (int i = 0; i <= n; i++)
	{
		x = a + i * h;
		if (i == 0 || i == n) {
			I += (sqrt(0.4 * pow(x, 2) + 1.5) / (2.5 + sqrt(2 * x + 0.8))) / 2;
		}
		else {
			I += sqrt(0.4 * pow(x, 2) + 1.5) / (2.5 + sqrt(2 * x + 0.8));
		}
	}
	cout << "Integral 1 by method of trapezies on the segment from 0.8 to 2.4: " << h * I << endl << endl;
}

void integral2() {
	int n;
	float a = 0.4, b = 1.2, x, I = 0;
	cout << "How many parts do you want to split the integration segment: ";
	cin >> n;
	cout << endl;
	float h = (b - a) / n;
	//метод левых прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h;
		I += cos(pow(x, 2) + 0.8) / (1.5 + sin(0.6 * x + 0.5));
	}
	cout << "Integral 2 by method of left rectangles on the segment from 0.4 to 1.2: " << h * I << endl;
	I = 0;

	//метод правых прямоугольников
	for (int i = 1; i <= n; i++)
	{
		x = a + i * h;
		I += cos(pow(x, 2) + 0.8) / (1.5 + sin(0.6 * x + 0.5));
	}
	cout << "Integral 2 by method of right rectangles on the segment from 0.4 to 1.2: " << h * I << endl;
	I = 0;

	//метод средних прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h + h / 2;
		I += cos(pow(x, 2) + 0.8) / (1.5 + sin(0.6 * x + 0.5));
	}
	cout << "Integral 2 by method of center rectangles on the segment from 0.4 to 1.2: " << h * I << endl;
	I = 0;

	//метод трапеций
	for (int i = 0; i <= n; i++)
	{
		x = a + i * h;
		if (i == 0 || i == n) {
			 I += cos(pow(x, 2) + 0.8) / (1.5 + sin(0.6 * x + 0.5)) / 2;
		}
		else {
			I += cos(pow(x, 2) + 0.8) / (1.5 + sin(0.6 * x + 0.5));
		}
	}
	cout << "Integral 2 by method of trapezies on the segment from 0.4 to 1.2: " << h * I << endl << endl;
}

void integral3() {
	int n;
	float a = 0.6, b = 1.5, x, I = 0;
	cout << "How many parts do you want to split the integration segment: ";
	cin >> n;
	cout << endl;
	float h = (b - a) / n;
	//метод левых прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h;
		I += 1 / sqrt(1 + 2 * pow(x, 2));
	}
	cout << "Integral 3 by method of left rectangles on the segment from 0.6 to 1.5: " << h * I << endl;
	I = 0;

	//метод правых прямоугольников
	for (int i = 1; i <= n; i++)
	{
		x = a + i * h;
		I += 1 / sqrt(1 + 2 * pow(x, 2));
	}
	cout << "Integral 3 by method of right rectangles on the segment from 0.6 to 1.5: " << h * I << endl;
	I = 0;

	//метод средних прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h + h / 2;
		I += 1 / sqrt(1 + 2 * pow(x, 2));
	}
	cout << "Integral 3 by method of center rectangles on the segment from 0.6 to 1.5: " << h * I << endl;
	I = 0;

	//метод трапеций
	for (int i = 0; i <= n; i++)
	{
		x = a + i * h;
		if (i == 0 || i == n) {
			I += 1 / sqrt(1 + 2 * pow(x, 2)) / 2;
		}
		else {
			I += 1 / sqrt(1 + 2 * pow(x, 2));
		}
	}
	cout << "Integral 3 by method of trapezies on the segment from 0.6 to 1.5: " << h * I << endl << endl;
}

void integral4() {
	int n;
	float a = 0.4, b = 0.8, x, I = 0;
	cout << "How many parts do you want to split the integration segment: ";
	cin >> n;
	cout << endl;
	float h = (b - a) / n;
	//метод левых прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h;
		I += tan(pow(x, 2) + 0.5) / (1 + 2 * pow(x, 2));
	}
	cout << "Integral 4 by method of left rectangles on the segment from 0.4 to 0.8: " << h * I << endl;
	I = 0;

	//метод правых прямоугольников
	for (int i = 1; i <= n; i++)
	{
		x = a + i * h;
		I += tan(pow(x, 2) + 0.5) / (1 + 2 * pow(x, 2));
	}
	cout << "Integral 4 by method of right rectangles on the segment from 0.4 to 0.8: " << h * I << endl;
	I = 0;

	//метод средних прямоугольников
	for (int i = 0; i <= n - 1; i++)
	{
		x = a + i * h + h / 2;
		I += tan(pow(x, 2) + 0.5) / (1 + 2 * pow(x, 2));
	}
	cout << "Integral 4 by method of center rectangles on the segment from 0.4 to 0.8: " << h * I << endl;
	I = 0;

	//метод трапеций
	for (int i = 0; i <= n; i++)
	{
		x = a + i * h;
		if (i == 0 || i == n) {
			I += tan(pow(x, 2) + 0.5) / (1 + 2 * pow(x, 2)) / 2;
		}
		else {
			I += tan(pow(x, 2) + 0.5) / (1 + 2 * pow(x, 2));
		}
	}
	cout << "Integral 4 by method of trapezies on the segment from 0.4 to 0.8: " << h * I << endl;
}
//---------------------------------------------------------------------------
#pragma package(smart_init)
